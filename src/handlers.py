# src/handlers.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from .utils import ConfigManager, LocaleManager, DataFetcher
from .keyboards import KeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class BotHandlers:
    def __init__(self):
        self.config_manager = ConfigManager()
        self.default_language = self.config_manager.get_config('languages', 'default')

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            locale_manager = LocaleManager(self.default_language)
            keyboard = KeyboardBuilder.build_main_menu(locale_manager)

            if update.message:
                await update.message.reply_text(
                    locale_manager.translate('start_message'),
                    reply_markup=keyboard
                )
            elif update.callback_query:
                await update.callback_query.edit_message_text(
                    locale_manager.translate('start_message'),
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ start: {e}", exc_info=True)
            if update.callback_query:
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_manufacturers(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            locale_manager = LocaleManager(self.default_language)
            page = int(update.callback_query.data.split(':')[1]) if ':' in update.callback_query.data else 0
            manufacturers_url = self.config_manager.get_config('data_sources', 'manufacturers_url')

            manufacturers = DataFetcher.get_manufacturers(manufacturers_url)
            per_page = self.config_manager.get_config('pagination', 'manufacturers_per_page')
            columns = self.config_manager.get_config('pagination', 'manufacturers_columns')

            keyboard = KeyboardBuilder.build_manufacturers_keyboard(
                manufacturers,
                page,
                locale_manager,
                per_page,
                columns
            )

            await update.callback_query.edit_message_text(
                locale_manager.translate('select_manufacturer'),
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ handle_manufacturers: {e}", exc_info=True)
            await update.callback_query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_models(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            locale_manager = LocaleManager(self.default_language)
            manufacturer_model = update.callback_query.data.split(':')[1]

            base_model_url = self.config_manager.get_config('data_sources', 'base_model_url')
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å URL: {base_model_url.format(model=manufacturer_model)}")

            models_data = DataFetcher.get_models(base_model_url, manufacturer_model)

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π: {models_data}")

            if not models_data or 'models' not in models_data:
                logger.error(f"–ú–æ–¥–µ–ª–∏ –¥–ª—è {manufacturer_model} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await update.callback_query.edit_message_text("–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            models = models_data['models']
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")

            per_page = self.config_manager.get_config('pagination', 'models_per_page')

            page_match = update.callback_query.data.split(':')
            page = int(page_match[2]) if len(page_match) > 2 else 0

            keyboard = KeyboardBuilder.build_models_keyboard(
                models,
                manufacturer_model,
                page,
                locale_manager,
                per_page
            )

            await update.callback_query.edit_message_text(
                locale_manager.translate('select_model', manufacturer=manufacturer_model),
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ handle_models: {e}", exc_info=True)
            await update.callback_query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def show_model_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            locale_manager = LocaleManager(self.default_language)
            manufacturer, model_name = update.callback_query.data.split(':')[1:]

            base_model_url = self.config_manager.get_config('data_sources', 'base_model_url')
            models_data = DataFetcher.get_models(base_model_url, manufacturer)

            model = next((m for m in models_data.get('models', []) if m['name'] == model_name), None)

            if not model:
                await update.callback_query.edit_message_text("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
            sensitivities_text = "\n".join([
                f"‚Ä¢ {locale_manager.translate(key)}: {value}"
                for key, value in model.get('sensitivities', {}).items()
            ])

            details_text = (
                f"üì± –ú–æ–¥–µ–ª—å: {model['name']}\n\n"
                f"üîç –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {manufacturer}\n\n"
                f"üéØ DPI: {model.get('dpi', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ Fire: {model.get('fire_button', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n{sensitivities_text}"
            )

            keyboard = KeyboardBuilder.build_model_details_keyboard(
                manufacturer,
                locale_manager
            )

            await update.callback_query.edit_message_text(
                details_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ show_model_details: {e}", exc_info=True)
            await update.callback_query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            locale_manager = LocaleManager(self.default_language)

            support_text = locale_manager.translate('support_message')
            keyboard = KeyboardBuilder.build_support_keyboard(locale_manager)

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    support_text,
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    support_text,
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ handle_support: {e}", exc_info=True)
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

    async def handle_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            locale_manager = LocaleManager(self.default_language)

            channel_text = locale_manager.translate('channel_message')
            keyboard = KeyboardBuilder.build_channel_keyboard(locale_manager)

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    channel_text,
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    channel_text,
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ handle_channel: {e}", exc_info=True)
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )